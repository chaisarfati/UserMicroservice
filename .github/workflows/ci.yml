name: UserMicroservice CI

on:
  push:
    branches:
      - '**'  # Execute on all branches
  pull_request:
    branches:
      - '**'  # Execute on all pull requests

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.set-env.outputs.BRANCH_NAME }}
    steps:
      - name: Set branch name
        id: set-env
        run: |
          # Defining variables
          REF_BRANCH_NAME=${{ github.ref }}
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME=${{ github.head_ref }}
          else
            BRANCH_NAME=$(echo -e $REF_BRANCH_NAME | cut -d"/" -f3-) # remove ref/head/ from branch name
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: init
    env:
      BRANCH_NAME: ${{ needs.init.outputs.BRANCH_NAME }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ env.BRANCH_NAME }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'  # Set your desired Python version here

    - name: Install Protobuf and gRPC tools
      run: |
        python -m pip install --upgrade pip
        pip install grpcio-tools

    - name: Generate stubs
      run: |
        for proto_file in $(ls proto/ | grep .proto$); do
          cd proto/
          python -m grpc_tools.protoc -I. --python_out=../ --grpc_python_out=../ $proto_file
          cd ..
        done

    - name: Setup Virtual Environment & Run Tests
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        source venv/bin/activate
        python -m pip install -r requirements.txt
        python -m unittest discover -s . -p "test_server.py"

    - name: Commit generated stubs
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git config --global push.autoSetupRemote true
        git fetch
        git pull origin ${{ env.BRANCH_NAME }}
        git add .
        git diff-index --quiet HEAD || git commit -m "Generated stubs"
          
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GH_TOKEN }}
        branch: ${{ env.BRANCH_NAME }}

  build_docker_image:
    runs-on: ubuntu-latest
    needs: [init, build]
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHPR_TOKEN }}

      - name: Convert repository name to lowercase and sanitize branch name
        id: vars
        run: |
          echo "REPO_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d"/" -f2)" >> $GITHUB_ENV
          echo "BRANCH_NAME_SANITIZED=$(echo ${{ github.ref_name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-' | tr '/' '-')" >> $GITHUB_ENV
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_NAME_LOWER }}:${{ env.BRANCH_NAME_SANITIZED }}.${{ env.SHA_SHORT }}.docker
          build-args: |
            GH_TOKEN=${{ secrets.GH_TOKEN }}